'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var postcss = _interopDefault(require('postcss'));

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

var index = postcss.plugin('postcss-short-position', opts => {
  const prefix = 'prefix' in Object(opts) ? `-${opts.prefix}-` : '';
  const skip = 'skip' in Object(opts) ? String(opts.skip) : '*'; // property pattern

  const propertyMatch = new RegExp(`^${prefix}(position)$`);
  return root => {
    // walk each matching declaration
    root.walkDecls(propertyMatch, decl => {
      // unprefixed property
      const _decl$prop$match = decl.prop.match(propertyMatch),
            _decl$prop$match2 = _slicedToArray(_decl$prop$match, 2),
            property = _decl$prop$match2[1]; // if a prefix is in use


      if (prefix) {
        // remove it from the property
        decl.prop = property;
      } // position value


      let position; // space-separated values (top, right, bottom, left) sans the position value

      const values = postcss.list.space(decl.value).filter(value => {
        // whether the value is a position
        const isPosition = !position && positionMatch.test(value); // if the value is a position

        if (isPosition) {
          // update the position value
          position = value;
        } // return whether the value was not a position (a side)


        return !isPosition;
      }); // conditionally add a top value

      if (values.length === 0) {
        values.push(skip);
      } // conditionally add a right value


      if (values.length === 1) {
        values.push(values[0]);
      } // conditionally add a bottom value


      if (values.length === 2) {
        values.push(values[0]);
      } // conditionally add a left value


      if (values.length === 3) {
        values.push(values[1]);
      } // for each side property


      properties.forEach((side, index) => {
        // if the value is not a skip token
        if (values[index] !== skip) {
          // create a new declaration for the side property
          decl.cloneBefore({
            prop: side,
            value: values[index]
          });
        }
      }); // if there is a position value

      if (position) {
        // update the position value
        decl.value = position;
      } else {
        // otherwise, remove the original position declaration
        decl.remove();
      }
    });
  };
}); // side properties

const properties = ['top', 'right', 'bottom', 'left']; // position value pattern

const positionMatch = /^(inherit|initial|unset|absolute|fixed|relative|static|sticky|var\(.+\))$/;

module.exports = index;
//# sourceMappingURL=index.cjs.js.map
