'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var postcssShortBorder = _interopDefault(require('postcss-short-border'));
var postcssShortBorderRadius = _interopDefault(require('postcss-short-border-radius'));
var postcssShortColor = _interopDefault(require('postcss-short-color'));
var postcssShortFontSize = _interopDefault(require('postcss-short-font-size'));
var postcssShortOverflow = _interopDefault(require('postcss-short-overflow'));
var postcssShortPosition = _interopDefault(require('postcss-short-position'));
var postcssShortSize = _interopDefault(require('postcss-short-size'));
var postcssShortSpacing = _interopDefault(require('postcss-short-spacing'));
var postcssFontWeights = _interopDefault(require('postcss-font-weights'));
var postcss = _interopDefault(require('postcss'));

var plugins = {
  border: postcssShortBorder,
  borderRadius: postcssShortBorderRadius,
  color: postcssShortColor,
  fontSize: postcssShortFontSize,
  overflow: postcssShortOverflow,
  position: postcssShortPosition,
  size: postcssShortSize,
  spacing: postcssShortSpacing,
  fontWeights: postcssFontWeights
};

var index = postcss.plugin('postcss-short', opts => {
  const features = Object.assign({}, Object(opts).features);
  const pluginOpts = {};

  if ('prefix' in Object(opts)) {
    pluginOpts.prefix = opts.prefix;
  }

  if ('skip' in Object(opts)) {
    pluginOpts.skip = opts.skip;
  }

  const enabledPlugins = Object.keys(plugins).reduce((array, name) => features[name] === false ? array : array.concat(plugins[name](Object.assign({}, pluginOpts, features[name]))), []);
  return (root, result) => enabledPlugins.reduce((promise, plugin) => promise.then(() => plugin(result.root, result)), Promise.resolve());
});

module.exports = index;
//# sourceMappingURL=index.cjs.js.map
