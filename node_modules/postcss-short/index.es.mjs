import postcssShortBorder from 'postcss-short-border';
import postcssShortBorderRadius from 'postcss-short-border-radius';
import postcssShortColor from 'postcss-short-color';
import postcssShortFontSize from 'postcss-short-font-size';
import postcssShortOverflow from 'postcss-short-overflow';
import postcssShortPosition from 'postcss-short-position';
import postcssShortSize from 'postcss-short-size';
import postcssShortSpacing from 'postcss-short-spacing';
import postcssFontWeights from 'postcss-font-weights';
import postcss from 'postcss';

var plugins = {
  border: postcssShortBorder,
  borderRadius: postcssShortBorderRadius,
  color: postcssShortColor,
  fontSize: postcssShortFontSize,
  overflow: postcssShortOverflow,
  position: postcssShortPosition,
  size: postcssShortSize,
  spacing: postcssShortSpacing,
  fontWeights: postcssFontWeights
};

var index = postcss.plugin('postcss-short', opts => {
  const features = Object.assign({}, Object(opts).features);
  const pluginOpts = {};

  if ('prefix' in Object(opts)) {
    pluginOpts.prefix = opts.prefix;
  }

  if ('skip' in Object(opts)) {
    pluginOpts.skip = opts.skip;
  }

  const enabledPlugins = Object.keys(plugins).reduce((array, name) => features[name] === false ? array : array.concat(plugins[name](Object.assign({}, pluginOpts, features[name]))), []);
  return (root, result) => enabledPlugins.reduce((promise, plugin) => promise.then(() => plugin(result.root, result)), Promise.resolve());
});

export default index;
//# sourceMappingURL=index.es.mjs.map
