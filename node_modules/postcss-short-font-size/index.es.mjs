import postcss from 'postcss';

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

const importantMatch = /\s*!important$/;
var index = postcss.plugin('postcss-short-font-size', opts => {
  const prefix = 'prefix' in Object(opts) ? `-${opts.prefix}-` : '';
  const skip = 'skip' in Object(opts) ? String(opts.skip) : '*';
  const fontSizePropertyRegExp = new RegExp(`^${prefix}(font-size)$`);
  return root => {
    // for each font-size declaration
    root.walkDecls(fontSizePropertyRegExp, decl => {
      // conditionally unprefix the font-size property
      decl.prop = decl.prop.replace(fontSizePropertyRegExp, '$1'); // slash-separated values (font-size, line-height)

      const _postcss$list$split = postcss.list.split(decl.value, '/'),
            _postcss$list$split2 = _slicedToArray(_postcss$list$split, 2),
            fontSize = _postcss$list$split2[0],
            lineHeight = _postcss$list$split2[1]; // whether the font-size is !important


      decl.important = importantMatch.test(fontSize);

      if (lineHeight) {
        // conditionally prepend the line-height declaration
        if (lineHeight !== skip) {
          decl.cloneBefore({
            prop: 'line-height',
            value: lineHeight
          });
        } // conditionally remove the color declaration


        if (fontSize !== skip) {
          decl.value = fontSize.replace(importantMatch, '');
        } else {
          decl.remove();
        }
      }
    });
  };
});

export default index;
//# sourceMappingURL=index.es.mjs.map
