'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var postcss = _interopDefault(require('postcss'));

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

var index = postcss.plugin('postcss-short-color', opts => {
  const prefix = 'prefix' in Object(opts) ? `-${opts.prefix}-` : '';
  const skip = 'skip' in Object(opts) ? String(opts.skip) : '*';
  const colorPropertyRegExp = new RegExp(`^${prefix}(color)$`);
  return root => {
    // for each color declaration
    root.walkDecls(colorPropertyRegExp, decl => {
      // conditionally unprefix the color property
      decl.prop = decl.prop.replace(colorPropertyRegExp, '$1'); // space-separated values (color, background-color)

      const _postcss$list$space = postcss.list.space(decl.value),
            _postcss$list$space2 = _slicedToArray(_postcss$list$space, 2),
            color = _postcss$list$space2[0],
            backgroundColor = _postcss$list$space2[1];

      if (backgroundColor) {
        // conditionally prepend the background-color declaration
        if (backgroundColor !== skip) {
          decl.cloneBefore({
            prop: 'background-color',
            value: backgroundColor
          });
        } // conditionally remove the color declaration


        if (color !== skip) {
          decl.value = color;
        } else {
          decl.remove();
        }
      }
    });
  };
});

module.exports = index;
//# sourceMappingURL=index.cjs.js.map
