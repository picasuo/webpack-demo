'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var postcss = _interopDefault(require('postcss'));

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

var index = postcss.plugin('postcss-short-overflow', opts => {
  // get the dashed prefix
  const prefix = 'prefix' in Object(opts) ? `-${opts.prefix}-` : ''; // get the (conditionally prefixed) property pattern

  const propertyRegExp = new RegExp(`^${prefix}(overflow)$`);
  return root => {
    // walk each matching declaration
    root.walkDecls(propertyRegExp, decl => {
      // conditionally remove the prefix from the property
      const _decl$prop$match = decl.prop.match(propertyRegExp),
            _decl$prop$match2 = _slicedToArray(_decl$prop$match, 2),
            property = _decl$prop$match2[1];

      if (prefix) {
        decl.prop = property;
      } // conditionally update multiple overflow values


      var _postcss$list$space = postcss.list.space(decl.value),
          _postcss$list$space2 = _slicedToArray(_postcss$list$space, 2),
          overflowX = _postcss$list$space2[0],
          overflowY = _postcss$list$space2[1];

      if (overflowY) {
        if (overflowX !== '*') {
          decl.cloneBefore({
            prop: 'overflow-x',
            value: overflowX
          });
        }

        if (overflowY !== '*') {
          decl.cloneBefore({
            prop: 'overflow-y',
            value: overflowY
          });
        }

        decl.remove();
      }
    });
  };
});

module.exports = index;
//# sourceMappingURL=index.cjs.js.map
