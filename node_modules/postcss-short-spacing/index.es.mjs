import postcss from 'postcss';

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

var index = postcss.plugin('postcss-short-spacing', opts => {
  // get the prefix
  const prefix = 'prefix' in Object(opts) ? `-${opts.prefix}-` : ''; // get the skip token

  const skip = 'skip' in Object(opts) ? String(opts.skip) : '*'; // property pattern

  const spacingPropertyRegExp = new RegExp(`^${prefix}(margin|padding)(-(?:block|end|inline|start))?$`, 'i');
  return root => {
    // walk each matching declaration
    root.walkDecls(spacingPropertyRegExp, decl => {
      const _decl$prop$match = decl.prop.match(spacingPropertyRegExp),
            _decl$prop$match2 = _slicedToArray(_decl$prop$match, 3),
            property = _decl$prop$match2[1],
            logical = _decl$prop$match2[2]; // update the property


      if (prefix) {
        decl.prop = `${property}${logical || ''}`;
      } // get the space-separated values


      const values = postcss.list.space(decl.value);

      if (values.includes(skip)) {
        const isBlockInline = blockInlineRegExp.test(logical);
        const isStartEnd = startEndRegExp.test(logical);
        const isFourSide = !logical;

        if (isBlockInline) {
          transformBlockInline(decl, `${property}${logical}-&`, values, skip);
        } else if (isStartEnd) {
          transformStartEnd(decl, `${property}-&${logical}`, values, skip);
        } else if (isFourSide) {
          transformFourSide(decl, `${property}-&`, values, skip);
        }

        decl.remove();
      }
    });
  };
});
const blockInlineRegExp = /^-(block|inline)$/i;
const startEndRegExp = /^-(start|end)$/i; // conditionally add start/end values

const transformBlockInline = (decl, property, values, skip) => {
  // eslint-disable-line max-params
  const _values = _slicedToArray(values, 2),
        $1 = _values[0],
        $2 = _values[1];

  if ($1 && $1 !== skip) {
    decl.cloneBefore({
      prop: property.replace('&', 'start'),
      value: $1
    });
  }

  if ($2 && $2 !== skip) {
    decl.cloneBefore({
      prop: property.replace('&', 'end'),
      value: $2
    });
  }
}; // conditionally add block/inline values


const transformStartEnd = (decl, property, values, skip) => {
  // eslint-disable-line max-params
  const _values2 = _slicedToArray(values, 2),
        $1 = _values2[0],
        $2 = _values2[1];

  if ($1 && $1 !== skip) {
    decl.cloneBefore({
      prop: property.replace('&', 'block'),
      value: $1
    });
  }

  if ($2 && $2 !== skip) {
    decl.cloneBefore({
      prop: property.replace('&', 'inline'),
      value: $2
    });
  }
}; // conditionally add top/right/bottom/left values


const transformFourSide = (decl, property, values, skip) => {
  // eslint-disable-line max-params
  const _values3 = _slicedToArray(values, 4),
        $1 = _values3[0],
        $2 = _values3[1],
        $3 = _values3[2],
        $4 = _values3[3]; // conditionally add a left value


  if ($4 && $4 !== skip) {
    decl.cloneBefore({
      prop: property.replace('&', 'left'),
      value: $4
    });
  } // conditionally add a bottom value


  if ($3 && $3 !== skip) {
    decl.cloneBefore({
      prop: property.replace('&', 'bottom'),
      value: $3
    });
  } // conditionally add a right value


  if ($2 && $2 !== skip) {
    if (!$4) {
      decl.cloneBefore({
        prop: property.replace('&', 'left'),
        value: $2
      });
    }

    decl.cloneBefore({
      prop: property.replace('&', 'right'),
      value: $2
    });
  } // conditionally add a top value


  if ($1 && $1 !== skip) {
    if (!$3) {
      decl.cloneBefore({
        prop: property.replace('&', 'bottom'),
        value: $1
      });
    }

    decl.cloneBefore({
      prop: property.replace('&', 'top'),
      value: $1
    });
  }
};

export default index;
//# sourceMappingURL=index.es.mjs.map
